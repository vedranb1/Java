/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dnevnikgledanja.view;


import dnevnikgledanja.controller.Obrada;
import dnevnikgledanja.model.Serija;
import dnevnikgledanja.model.Sezona;
import dnevnikgledanja.utility.HibernateUtil;
import java.awt.Color;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.hibernate.Query;

/**
 *
 * @author Veco
 */
public class Serije extends javax.swing.JFrame {

   private Obrada<Serija> obrada;
   private Obrada<Sezona> obradaSezona;
   private int sifraSerije;
   private long ukupnaOcjena;
   private long ukupnoSezona;
   private long prosjecnaOcjena;
    
    public Serije() {
        initComponents();
        
        obrada = new Obrada<>();
        obradaSezona = new Obrada<>();
        
        ucitajPodatkeSerija();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        brojSezonaLabel = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        sezoneList = new javax.swing.JList<>();
        nazivLabel = new javax.swing.JLabel();
        txtNaziv = new javax.swing.JTextField();
        btnDodaj = new javax.swing.JButton();
        btnPromjeni = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        txtBrojSezona = new javax.swing.JTextField();
        btnSelect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtDnevnik = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        serijeList = new javax.swing.JList<>();
        nazivSezoneLabel = new javax.swing.JLabel();
        txtNazivSezone = new javax.swing.JTextField();
        brojEpizodaLabel = new javax.swing.JLabel();
        txtBrojEpizoda = new javax.swing.JTextField();
        brojSezonaLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtRedniBroj = new javax.swing.JTextField();
        btnDodajSezonu = new javax.swing.JButton();
        btnPromjeniSezonu = new javax.swing.JButton();
        btnObrisiSezonu = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtPogledano = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtUkupanBrojEpizoda = new javax.swing.JTextField();
        btnPlus = new javax.swing.JButton();
        btnMinus = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtOcjenaSezone = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        LabelPrikaz = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtProsjek = new javax.swing.JTextField();

        brojSezonaLabel.setText("Broj sezona");

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sezoneList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sezoneListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(sezoneList);

        nazivLabel.setText("Naziv");

        btnDodaj.setText("Dodaj");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnPromjeni.setText("Promjeni");
        btnPromjeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromjeniActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        jLabel1.setText("Dnevnik");

        serijeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                serijeListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(serijeList);

        nazivSezoneLabel.setText("Naziv");

        brojEpizodaLabel.setText("Broj epizoda");

        brojSezonaLabel1.setText("Broj sezona");

        jLabel2.setText("Redni broj");

        btnDodajSezonu.setText("Dodaj");
        btnDodajSezonu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajSezonuActionPerformed(evt);
            }
        });

        btnPromjeniSezonu.setText("Promjeni");
        btnPromjeniSezonu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromjeniSezonuActionPerformed(evt);
            }
        });

        btnObrisiSezonu.setText("Obrisi");
        btnObrisiSezonu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiSezonuActionPerformed(evt);
            }
        });

        jLabel3.setText("Pogledano / Broj epizoda");

        jLabel4.setText("/");

        btnPlus.setText("+");
        btnPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusActionPerformed(evt);
            }
        });

        btnMinus.setText("-");
        btnMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinusActionPerformed(evt);
            }
        });

        jLabel5.setText("Ocjena sezone");

        jLabel6.setText("Prikazujem podatke za :");

        jLabel7.setText("Popis serija");

        jLabel8.setText("Prosjecna ocjena serije");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(49, 49, 49))
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(nazivLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtBrojSezona, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtDnevnik, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtNaziv, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnObrisi)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnPromjeni))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnDodaj)
                                    .addGap(65, 65, 65)
                                    .addComponent(btnSelect)))
                            .addGap(16, 16, 16)))
                    .addComponent(brojSezonaLabel1)
                    .addComponent(txtProsjek, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txtOcjenaSezone, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6)
                    .addComponent(LabelPrikaz))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNazivSezone, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addComponent(txtBrojEpizoda)
                    .addComponent(txtRedniBroj)
                    .addComponent(nazivSezoneLabel)
                    .addComponent(brojEpizodaLabel)
                    .addComponent(jLabel2)
                    .addComponent(btnObrisiSezonu)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDodajSezonu)
                        .addGap(18, 18, 18)
                        .addComponent(btnPromjeniSezonu))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPogledano, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUkupanBrojEpizoda, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPlus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMinus)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nazivSezoneLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNazivSezone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(brojEpizodaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBrojEpizoda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRedniBroj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPogledano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(txtUkupanBrojEpizoda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPlus)
                            .addComponent(btnMinus))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDodajSezonu)
                            .addComponent(btnPromjeniSezonu))
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisiSezonu))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nazivLabel)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(brojSezonaLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBrojSezona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDnevnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDodaj)
                            .addComponent(btnSelect))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPromjeni)
                            .addComponent(btnObrisi))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(LabelPrikaz)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel7)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtOcjenaSezone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtProsjek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
       
        /* resetirajGreske(); */
        if (!kontrolaSerija()) {
            return;
        }
        Serija s = new Serija();
        s = napuniObjekt(s);
        obrada.save(s);
        ucitajPodatkeSerija();
    }//GEN-LAST:event_btnDodajActionPerformed
    
    private Serija napuniObjekt(Serija ser) {
        ser.setNaziv(txtNaziv.getText());
        ser.setBrojsezona(Integer.parseInt(txtBrojSezona.getText()));
        ser.setDnevnik(Integer.parseInt(txtDnevnik.getText()));
        return ser;
    }
    
    private Sezona napuniObjektSezona(Sezona sez) {
        Serija ser = serijeList.getSelectedValue();
        sifraSerije = ser.getSifra();
        sez.setSerija(sifraSerije);
        sez.setNaziv(txtNazivSezone.getText());
        sez.setRednibroj(Integer.parseInt(txtRedniBroj.getText()));
        sez.setBrojepizoda(Integer.parseInt(txtBrojEpizoda.getText()));
       
        return sez;
    }
    
    private boolean kontrolaSerija() {
        if (txtNaziv.getText().trim().length() == 0) {
            oznaciGresku(txtNaziv);
            return false;
        }

        try {
            Integer.parseInt(txtBrojSezona.getText());
        } catch (Exception e) {
            oznaciGresku(txtBrojSezona);
            return false;
        }
        return true;
    }
    
    private boolean kontrolaSezona() {
        if (txtNazivSezone.getText().trim().length() == 0) {
            oznaciGresku(txtNazivSezone);
            return false;
        }
        
        if (txtBrojEpizoda.getText().trim().length() == 0) {
            oznaciGresku(txtBrojEpizoda);
            return false;
        }
        
        if (txtRedniBroj.getText().trim().length() == 0) {
            oznaciGresku(txtRedniBroj);
            return false;
        }

        return true;
    }

    private void oznaciGresku(JTextField polje) {
        polje.setBorder(BorderFactory.createLineBorder(Color.decode("#FF0000")));
        polje.requestFocus();
    }
    
    /*
    private void resetirajGreske() {
        txtNaziv.setBorder(obrub);
        txtCijena.setBorder(obrub);
        txtUpisnina.setBorder(obrub);
        txtTrajanje.setBorder(obrub);
    }
    */
    
    private void btnPromjeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromjeniActionPerformed
         
        Serija s = serijeList.getSelectedValue();
        if (s == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberite stavku");
            return;
        }

        if (txtNaziv.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(getRootPane(), "Obavezno naziv");
            return;
        }

        /* resetirajGreske(); */
        if (!kontrolaSerija()) {
            return;
        }
        s = napuniObjekt(s);
        obrada.save(s);
        ucitajPodatkeSerija();
    }//GEN-LAST:event_btnPromjeniActionPerformed

    private void sezoneListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sezoneListValueChanged
        
        if (evt.getValueIsAdjusting()) {
            return;
        }

        Sezona s = sezoneList.getSelectedValue();

        if (s == null) {
            return;
        }

        txtNazivSezone.setText(s.getNaziv());
        txtBrojEpizoda.setText(String.valueOf(s.getBrojepizoda()));
        txtRedniBroj.setText(String.valueOf(s.getRednibroj()));
        txtUkupanBrojEpizoda.setText(String.valueOf(s.getBrojepizoda()));
        txtPogledano.setText(String.valueOf(s.getPogledano()));
        txtOcjenaSezone.setText(String.valueOf(s.getOcjena()));
        
        if(Integer.parseInt(txtPogledano.getText())>Integer.parseInt(txtBrojEpizoda.getText())){
                txtPogledano.setText(String.valueOf(s.getBrojepizoda()));;
            }
    }//GEN-LAST:event_sezoneListValueChanged

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
       
        Serija s = serijeList.getSelectedValue();
        if (s == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberite stavku");
            return;
        }
        
        boolean mozeObrisati=true;
        
        /* for (Grupa g : s.getGrupe()) {
            if(!g.isObrisano()){
                mozeObrisati=false;
                break;
            }
        }
        

        if(!mozeObrisati){
            JOptionPane.showMessageDialog(getParent(), "Smjer se ne može obrisati re se na njemu nalaze grupe");
            return;
        } */
        obrada.delete(s);
        ucitajPodatkeSerija();
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
         
         ucitajPodatkeSezona();
         LabelPrikaz.setText(txtNaziv.getText());
         
    }//GEN-LAST:event_btnSelectActionPerformed

    private void serijeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_serijeListValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }
        
        Serija s = serijeList.getSelectedValue();
        sifraSerije = s.getSifra();

        if (s == null) {
            return;
        }

        txtNaziv.setText(s.getNaziv());
        txtBrojSezona.setText(String.valueOf(s.getBrojsezona()));
        Query query = HibernateUtil.getSession().createQuery(
                "select sum(ocjena) from dnevnikgledanja.model.Sezona where serija=:serija and ocjena>0 and obrisano=false").setInteger("serija", sifraSerije);
        ukupnaOcjena = (Long)query.uniqueResult();
        query = HibernateUtil.getSession().createQuery(
                "select count(sifra) from dnevnikgledanja.model.Sezona where serija=:serija and ocjena>0 and obrisano=false").setInteger("serija", sifraSerije);
        ukupnoSezona = (Long)query.uniqueResult();
        prosjecnaOcjena = ukupnaOcjena / ukupnoSezona;
        txtProsjek.setText(String.valueOf(prosjecnaOcjena));
    }//GEN-LAST:event_serijeListValueChanged

    private void btnDodajSezonuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajSezonuActionPerformed
        
        /* resetirajGreske(); */
        if (!kontrolaSezona()) {
            return;
        }
        Sezona sez = new Sezona();
        sez = napuniObjektSezona(sez);
        obradaSezona.save(sez);
        ucitajPodatkeSezona();
        
    }//GEN-LAST:event_btnDodajSezonuActionPerformed

    private void btnPromjeniSezonuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromjeniSezonuActionPerformed
       
        Sezona s = sezoneList.getSelectedValue();
        if (s == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberite stavku");
            return;
        }

        if (txtNazivSezone.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(getRootPane(), "Obavezno naziv");
            return;
        }

        /* resetirajGreske(); */
        if (!kontrolaSezona()) {
            return;
        }
        s = napuniObjektSezona(s);
        s.setOcjena(Integer.parseInt(txtOcjenaSezone.getText()));
        obradaSezona.save(s);
        ucitajPodatkeSezona();
        
    }//GEN-LAST:event_btnPromjeniSezonuActionPerformed

    private void btnObrisiSezonuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiSezonuActionPerformed
         
        Sezona s = sezoneList.getSelectedValue();
        if (s == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberite stavku");
            return;
        }
        
        boolean mozeObrisati=true;
        
        /* for (Grupa g : s.getGrupe()) {
            if(!g.isObrisano()){
                mozeObrisati=false;
                break;
            }
        }
        

        if(!mozeObrisati){
            JOptionPane.showMessageDialog(getParent(), "Smjer se ne može obrisati re se na njemu nalaze grupe");
            return;
        } */
        obradaSezona.delete(s);
        ucitajPodatkeSezona();
        
    }//GEN-LAST:event_btnObrisiSezonuActionPerformed

    private void btnPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusActionPerformed

        Sezona s = sezoneList.getSelectedValue();
        if(Integer.parseInt(txtPogledano.getText())==Integer.parseInt(txtBrojEpizoda.getText())){
             JOptionPane.showMessageDialog(getRootPane(), "Vrijednost ne moze biti veca od ukupnog broja epizoda.");
        }else {
            txtPogledano.setText(String.valueOf(s.getPogledano()+1));
            s.setPogledano(Integer.parseInt(txtPogledano.getText()));
            obradaSezona.save(s);
            if(Integer.parseInt(txtPogledano.getText())==Integer.parseInt(txtBrojEpizoda.getText())){
                String ocjena = JOptionPane.showInputDialog("Ocijenite sezonu. 1-10");
                while(Integer.parseInt(ocjena)>10 || Integer.parseInt(ocjena)<1){
                    ocjena = JOptionPane.showInputDialog("Ocijenite sezonu. 1-10");
                }
                s.setOcjena(Integer.parseInt(ocjena));
                txtOcjenaSezone.setText(String.valueOf(s.getOcjena()));
                obradaSezona.save(s);
            }
            
        }
    }//GEN-LAST:event_btnPlusActionPerformed

    private void btnMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinusActionPerformed
        
        Sezona s = sezoneList.getSelectedValue();
        if(Integer.parseInt(txtPogledano.getText())==1){
            JOptionPane.showMessageDialog(getRootPane(), "Vrijednost ne moze biti manja od 1.");
        } else {
            txtPogledano.setText(String.valueOf(s.getPogledano()-1));
            s.setPogledano(Integer.parseInt(txtPogledano.getText()));
            obradaSezona.save(s);
        }
        
    }//GEN-LAST:event_btnMinusActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Serije.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Serije.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Serije.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Serije.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Serije().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelPrikaz;
    private javax.swing.JLabel brojEpizodaLabel;
    private javax.swing.JLabel brojSezonaLabel;
    private javax.swing.JLabel brojSezonaLabel1;
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnDodajSezonu;
    private javax.swing.JButton btnMinus;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnObrisiSezonu;
    private javax.swing.JButton btnPlus;
    private javax.swing.JButton btnPromjeni;
    private javax.swing.JButton btnPromjeniSezonu;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nazivLabel;
    private javax.swing.JLabel nazivSezoneLabel;
    private javax.swing.JList<Serija> serijeList;
    private javax.swing.JList<Sezona> sezoneList;
    private javax.swing.JTextField txtBrojEpizoda;
    private javax.swing.JTextField txtBrojSezona;
    private javax.swing.JTextField txtDnevnik;
    private javax.swing.JTextField txtNaziv;
    private javax.swing.JTextField txtNazivSezone;
    private javax.swing.JTextField txtOcjenaSezone;
    private javax.swing.JTextField txtPogledano;
    private javax.swing.JTextField txtProsjek;
    private javax.swing.JTextField txtRedniBroj;
    private javax.swing.JTextField txtUkupanBrojEpizoda;
    // End of variables declaration//GEN-END:variables
    
     private void ucitajPodatkeSerija() {
        DefaultListModel<Serija> modelSerija = new DefaultListModel<>();

        List<Serija> lista = HibernateUtil.getSession().createQuery(
                "from dnevnikgledanja.model.Serija where obrisano=false").list();

        for (Serija s : lista) {
            modelSerija.addElement(s);
        }

        this.serijeList.setModel(modelSerija);

    }
     
    private void ucitajPodatkeSezona() {
        Serija ser = serijeList.getSelectedValue();
        sifraSerije = ser.getSifra();
        DefaultListModel<Sezona> modelSezona = new DefaultListModel<>();

        List<Sezona> lista = HibernateUtil.getSession().createQuery(
                "from dnevnikgledanja.model.Sezona where serija=:serija and obrisano=false").setInteger("serija", sifraSerije).list();

        for (Sezona s : lista) {
            modelSezona.addElement(s);
        }

        this.sezoneList.setModel(modelSezona);

    }
    
}
